import base/io
import base/str
import cpu6502
import cpu6502/flags
import r8
import r16
import makeram
import ram
import cpusinglestep

export cputests
end

testResetProg : M6502 M6502Effect Ram
testResetProg = emptyM6502 noEff emptyRam untilBRK

afterTestResetProgCPU : M6502
afterTestResetProgCPU = testResetProg drop drop
afterTestResetProgCPU == 0 v16 v8zero v8zero v8zero 0xff v8 emptyFlags fetch m6502

# Test that JSR and RTS are symmetric
testJSRRTSProg : Ram
testJSRRTSProg = $(
  emptyRam
  0x0000 0x20 v8 rotl byte_to_ram
  0x0001 0x08 v8 rotl byte_to_ram
  0x0002 0x00 v8 rotl byte_to_ram
  0x0008 0x60 v8 rotl byte_to_ram
  )

0 0x20 testJSRRTSProg showRange print == id
0xfffa 6 testJSRRTSProg showRange print == id

testRunJSRRTSProg : M6502 M6502Effect Ram
testRunJSRRTSProg = emptyM6502 noEff testJSRRTSProg untilBRK

afterTestJSRRTSProgRam : Ram
afterTestJSRRTSProgRam = testRunJSRRTSProg dip(drop drop)

afterTestJSRRTSProgCPU : M6502
afterTestJSRRTSProgCPU = testRunJSRRTSProg drop drop

afterTestJSRRTSProgCPU == 3 v16 v8zero v8zero v8zero 0xff v8 emptyFlags fetch m6502

0x1ff afterTestJSRRTSProgRam byte_of_ram == 0x00 v8
0x1fe afterTestJSRRTSProgRam byte_of_ram == 0x02 v8

# Thanks: http://6502.org/tutorials/decimal_mode.html
# The general way I've been building these is:
#
# - Copy the example asm snip into https://skilldrick.github.io/easy6502/
# - Assemble, Run
# - Hexdump and copy the assembled program here
# - Write an assertion that the CPU is in the proper state
# - If there's memory writes required, assert those bytes show up too

# Test that ADC works correctly
testADCProg1 : Ram
testADCProg1 = $(
  emptyRam
  0x0000 0x18 v8 rotl byte_to_ram
  0x0001 0xa9 v8 rotl byte_to_ram
  0x0002 0x01 v8 rotl byte_to_ram
  0x0003 0x69 v8 rotl byte_to_ram
  0x0004 0x01 v8 rotl byte_to_ram
  )

# adcSteps : M6502 M6502Effect Ram +IO
# adcSteps = emptyM6502 noEff testADCProg1 10 runSteps
# adcSteps drop drop drop == id

afterTestADCProg1 : M6502 M6502Effect Ram
afterTestADCProg1 = emptyM6502 noEff testADCProg1 untilBRK
afterTestADCProg1 drop drop == 5 v16 2 v8 v8zero v8zero 0xff v8 emptyFlags fetch m6502

testADCProg2 : Ram
testADCProg2 = $(
  emptyRam
  0x0000 0xf8 v8 rotl byte_to_ram
  0x0001 0xa9 v8 rotl byte_to_ram
  0x0002 0x05 v8 rotl byte_to_ram
  0x0003 0x18 v8 rotl byte_to_ram
  0x0004 0x69 v8 rotl byte_to_ram
  0x0005 0x05 v8 rotl byte_to_ram
  )

afterTestADCProg2 : M6502 M6502Effect Ram
afterTestADCProg2 = emptyM6502 noEff testADCProg2 untilBRK
afterTestADCProg2 drop drop == 6 v16 0x10 v8 v8zero v8zero 0xff v8 emptyFlags true setDFlag fetch m6502

testADCProg3 : Ram
testADCProg3 = $(
  emptyRam
  0x0000 0xd8 v8 rotl byte_to_ram
  0x0001 0x38 v8 rotl byte_to_ram
  0x0002 0xa9 v8 rotl byte_to_ram
  0x0003 0x58 v8 rotl byte_to_ram
  0x0004 0x69 v8 rotl byte_to_ram
  0x0005 0x46 v8 rotl byte_to_ram
  )

afterTestADCProg3 : M6502 M6502Effect Ram
afterTestADCProg3 = emptyM6502 noEff testADCProg3 untilBRK
afterTestADCProg3 drop drop == 6 v16 0x9f v8 v8zero v8zero 0xff v8 emptyFlags true setNFlag true setVFlag fetch m6502

testSBCProg1 : Ram
testSBCProg1 = $(
  emptyRam
  0x0000 0x38 v8 rotl byte_to_ram
  0x0001 0xa9 v8 rotl byte_to_ram
  0x0002 0x00 v8 rotl byte_to_ram
  0x0003 0xe9 v8 rotl byte_to_ram
  0x0004 0x01 v8 rotl byte_to_ram
  )

afterTestSBCProg1 : M6502 M6502Effect Ram
afterTestSBCProg1 = emptyM6502 noEff testSBCProg1 untilBRK
afterTestSBCProg1 drop drop == 5 v16 0xff v8 v8zero v8zero 0xff v8 emptyFlags true setNFlag fetch m6502

testSBCProg2 : Ram
testSBCProg2 = $(
  emptyRam
  0x0000 0x18 v8 rotl byte_to_ram
  0x0001 0xa9 v8 rotl byte_to_ram
  0x0002 0x80 v8 rotl byte_to_ram
  0x0003 0xe9 v8 rotl byte_to_ram
  0x0004 0x01 v8 rotl byte_to_ram
  )

afterTestSBCProg2 : M6502 M6502Effect Ram
afterTestSBCProg2 = emptyM6502 noEff testSBCProg2 untilBRK
afterTestSBCProg2 drop drop == 5 v16 0x7e v8 v8zero v8zero 0xff v8 emptyFlags true setVFlag true setCFlag fetch m6502

testSBCProg3 : Ram
testSBCProg3 = $(
  emptyRam
  0x0000 0x38 v8 rotl byte_to_ram
  0x0001 0xa9 v8 rotl byte_to_ram
  0x0002 0x80 v8 rotl byte_to_ram
  0x0003 0xe9 v8 rotl byte_to_ram
  0x0004 0x01 v8 rotl byte_to_ram
  )

afterTestSBCProg3 : M6502 M6502Effect Ram
afterTestSBCProg3 = emptyM6502 noEff testSBCProg3 untilBRK
afterTestSBCProg3 drop drop == 5 v16 0x7f v8 v8zero v8zero 0xff v8 emptyFlags true setVFlag true setCFlag fetch m6502

testSBCProg4 : Ram
testSBCProg4 = $(
  emptyRam
  0x0000 0x38 v8 rotl byte_to_ram
  0x0001 0xa9 v8 rotl byte_to_ram
  0x0002 0x03 v8 rotl byte_to_ram
  0x0003 0xe9 v8 rotl byte_to_ram
  0x0004 0x03 v8 rotl byte_to_ram
  )

afterTestSBCProg4 : M6502 M6502Effect Ram
afterTestSBCProg4 = emptyM6502 noEff testSBCProg4 untilBRK
afterTestSBCProg4 drop drop == 5 v16 0 v8 v8zero v8zero 0xff v8 emptyFlags true setZFlag true setCFlag fetch m6502

testSECProg : Ram
testSECProg = $(
  emptyRam
  0x0000 0x38 v8 rotl byte_to_ram
  )

afterTestSECProg : M6502 M6502Effect Ram
afterTestSECProg = emptyM6502 noEff testSECProg untilBRK
afterTestSECProg drop drop == 1 v16 v8zero v8zero v8zero 0xff v8 emptyFlags true setCFlag fetch m6502

testJMPProg : Ram
testJMPProg = $(
  emptyRam
  0x0000 0x4c v8 rotl byte_to_ram
  0x0001 0x04 v8 rotl byte_to_ram
  0x0002 0x06 v8 rotl byte_to_ram
  0x0003 0x38 v8 rotl byte_to_ram
  0x0004 0x00 v8 rotl byte_to_ram
  )

afterTestJMPProg : M6502 M6502Effect Ram
afterTestJMPProg = emptyM6502 noEff testJMPProg untilBRK
afterTestJMPProg drop drop == 0x0604 v16 v8zero v8zero v8zero 0xff v8 emptyFlags fetch m6502

testIndirectJMPProg : Ram
testIndirectJMPProg = $(
  emptyRam
  0x0000 0xa9 v8 rotl byte_to_ram
  0x0001 0x08 v8 rotl byte_to_ram
  0x0002 0x85 v8 rotl byte_to_ram
  0x0003 0x50 v8 rotl byte_to_ram
  0x0004 0x6c v8 rotl byte_to_ram
  0x0005 0x50 v8 rotl byte_to_ram
  0x0006 0x00 v8 rotl byte_to_ram
  0x0007 0x38 v8 rotl byte_to_ram
  0x0008 0x78 v8 rotl byte_to_ram
  )

afterTestIndirectJMPProg : M6502 M6502Effect Ram
afterTestIndirectJMPProg = emptyM6502 noEff testIndirectJMPProg untilBRK
afterTestIndirectJMPProg drop drop == 0x09 v16 8 v8 v8zero v8zero 0xff v8 emptyFlags true setIFlag fetch m6502

testCMPProg : Ram
testCMPProg = $(
  emptyRam
  0x0000 0xa9 v8 rotl byte_to_ram
  0x0001 0x03 v8 rotl byte_to_ram
  0x0002 0xc9 v8 rotl byte_to_ram
  0x0003 0x03 v8 rotl byte_to_ram
  )

afterTestCMPProg : M6502 M6502Effect Ram
afterTestCMPProg = emptyM6502 noEff testCMPProg untilBRK
afterTestCMPProg drop drop == 4 v16 3 v8 v8zero v8zero 0xff v8 emptyFlags true setZFlag true setCFlag fetch m6502

testCPXProg : Ram
testCPXProg = $(
  emptyRam
  0x0000 0xa9 v8 rotl byte_to_ram
  0x0001 0x03 v8 rotl byte_to_ram
  0x0002 0xaa v8 rotl byte_to_ram
  0x0003 0xa9 v8 rotl byte_to_ram
  0x0004 0x04 v8 rotl byte_to_ram
  0x0005 0xe0 v8 rotl byte_to_ram
  0x0006 0x03 v8 rotl byte_to_ram
  )

afterTestCPXProg : M6502 M6502Effect Ram
afterTestCPXProg = emptyM6502 noEff testCPXProg untilBRK
afterTestCPXProg drop drop == 7 v16 4 v8 3 v8 v8zero 0xff v8 emptyFlags true setZFlag true setCFlag fetch m6502

testBEQProg : Ram
testBEQProg = $(
  emptyRam
  0x0000 0xa9 v8 rotl byte_to_ram
  0x0001 0x00 v8 rotl byte_to_ram
  0x0002 0xaa v8 rotl byte_to_ram
  0x0003 0x69 v8 rotl byte_to_ram
  0x0004 0x01 v8 rotl byte_to_ram
  0x0005 0xc9 v8 rotl byte_to_ram
  0x0006 0x05 v8 rotl byte_to_ram
  0x0007 0xd0 v8 rotl byte_to_ram
  0x0008 0xfa v8 rotl byte_to_ram
  )

afterTestBEQProg : M6502 M6502Effect Ram
afterTestBEQProg = emptyM6502 noEff testBEQProg untilBRK
afterTestBEQProg drop drop == 9 v16 5 v8 v8zero v8zero 0xff v8 emptyFlags true setZFlag true setCFlag fetch m6502
