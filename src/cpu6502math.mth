import base/int
import base/nat
import r8
import divmod

export cpu6502/math
  adcBody : Bool Int Int Int -- Int Bool Bool Bool
  sbcBody : Bool Int Int Int -- Int Bool Bool Bool

  adcDecBody : Int Int Int -- Int Bool Bool Bool
  adcDecPrepare : Int Int Int -- Int Int Int Int
  adcDecProduceResult : Int Int Int -- Int Bool Bool Bool
  adcDigitsCarryingAtMost1 : Int Int -- Int Int # Carry Value
  adcDecExtractV : Int Int -- Int Int Int
  adcDecRawBody : Int Int Int -- Int Int Int Int
  adcDecCombineDigits : Int Int -- Int

  fourBitTwosComplement : Int -- Int

  adcBinBody : Int Int Int -- Int Bool Bool Bool

  sbcBinExtractV : Int Int Int -- Int Int Int Bool
  sbcDigitSubtract : Int Int -- Int Int
  sbcDecRaw : Int Int Int -- Int Int Int

  sbcDecBody : Int Int Int -- Int Bool Bool Bool
  sbcBinBody : Int Int Int -- Int Bool Bool Bool
end

adcBinGetA : Int Int Int -- Int Int Int Int
adcBinGetA = dup3 drop drop

adcBinGetSum : Int Int Int -- Int Int Int Int
adcBinGetSum = dup3 z+ z+

adcBinGetSrc : Int Int Int -- Int Int Int Int
adcBinGetSrc = dup2 drop

# jsnes: A ^ src & 0x80 == 0 && A ^ sum & 0x80 != 0
adcBinExtractAXor(extract : Int Int Int -- Int Int Int Int) : Int Int Int -- Int Int Int Bool
adcBinExtractAXor(extract) = adcBinGetA 128 divInt 2 modInt dip(extract 128 divInt 2 modInt) z= not

adcBinExtractAXorSum : Int Int Int -- Int Int Int Bool
adcBinExtractAXorSum = adcBinExtractAXor(adcBinGetSum)

adcBinExtractAXorSrc : Int Int Int -- Int Int Int Bool
adcBinExtractAXorSrc = adcBinExtractAXor(adcBinGetSrc)

adcBinExtractV : Int Int Int -- Int Int Int Bool
adcBinExtractV = adcBinExtractAXorSum dip(adcBinExtractAXorSrc not) and

adcBinExtractSC : Int Int Int -- Int Int Int Bool Bool
adcBinExtractSC = dup3 z+ z+ dup 255 z> dip(256 modInt 127 z>)

# adc takes the two values and 1 or zero depending on the carry flag
# returns the addition result and the three flags: N C V

adcBinBody : Int Int Int -- Int Bool Bool Bool
adcBinBody = adcBinExtractV dip(adcBinExtractSC) dip3(z+ z+)

breakIntoHexDigits : Int -- Int Int
breakIntoHexDigits = dup dip(16 divInt) 16 modInt

adcDigitsCarryingAtMost1 : Int Int -- Int Int # Carry Value
adcDigitsCarryingAtMost1 = z+ dup 9 z> if(dip(1) 10 modInt, dip(0))

0x33 breakIntoHexDigits == 3 3
15 15 adcDigitsCarryingAtMost1 == 1 0
9 8 adcDigitsCarryingAtMost1 == 1 7

# 4 bit twos complement high digit
fourBitTwosComplement : Int -- Int
fourBitTwosComplement = dup 7 z> if(16 z-,id)

adcDecExtractV : Int Int -- Int Int Int
adcDecExtractV = $(
  dup2
  dip(fourBitTwosComplement)
  fourBitTwosComplement
  z+ dup -8 z< if(drop 1,7 z> if(1,0))
  rotr
  )

intToBool : Int -- Bool
intToBool = 0 z= not

adcDecPrepare : Int Int Int -- Int Int Int Int
adcDecPrepare = $(
  rotl
  z+
  dip(breakIntoHexDigits)
  breakIntoHexDigits
  dip(rotr) # HB HA LA LB
  )

1 0x31 0x45 adcDecPrepare == 4 3 1 6

adcDecProduceResult : Int Int Int -- Int Bool Bool Bool
adcDecProduceResult = $(
  rotl
  rotl
  swap # Result C V
  dip2(dup 0x7f z>)
  dip(intToBool)
  intToBool # Result S C V
  )

adcDecRawBody : Int Int Int -- Int Int Int Int
adcDecRawBody = $(
  adcDecPrepare # Int Int Int Int # AH BH BL AL
  adcDigitsCarryingAtMost1 # AH BH C ResultL
  dip(z+) # AH BHP1 ResultL
  dip(adcDecExtractV) # V AH BHP1 ResultL
  dip(adcDigitsCarryingAtMost1) # V C ResultH ResultL
  )

adcDecCombineDigits : Int Int -- Int
adcDecCombineDigits = swap 16 z* z+ # V C Result

adcDecBody : Int Int Int -- Int Bool Bool Bool
adcDecBody = $(
  adcDecRawBody
  adcDecCombineDigits
  adcDecProduceResult
  )

adcBody : Bool Int Int Int -- Int Bool Bool Bool
adcBody = dip(rotl) swap if(adcDecBody,adcBinBody)

sbcDigitSubtract : Int Int -- Int Int
sbcDigitSubtract = $(
  z-
  dup
  0 z< if(100 z+ 10 modInt dip(1), dip(0))
  )

sbcCombineBorrow : Int Int -- Int
sbcCombineBorrow = 1 swap z- z+

sbcDecRaw : Int Int Int -- Int Int Int
sbcDecRaw = $(
  1 swap z- rotr
  adcDecPrepare
  sbcDigitSubtract
  dip(z- sbcDigitSubtract) # Borrow RH RL
  )

sbcDecBody : Int Int Int -- Int Bool Bool Bool # Int Bool Bool Bool
sbcDecBody = $(
  sbcDecRaw
  adcBinExtractV
  dip(rotl 1 z-) swap 0 z= # RH RL V C
  dip2(adcDecCombineDigits) # R V C
  dip2(512 z+ 256 modInt dup 127 z>) not swap # R S C V
  )

sbcBinExtractSC : Int Int Int -- Int Int Int Bool Bool
sbcBinExtractSC = dup3 sbcCombineBorrow z- dup 512 z+ 256 modInt 127 z> dip(-1 z>) swap

sbcBinGetSum : Int Int Int -- Int Int Int Int
sbcBinGetSum = dup3 sbcCombineBorrow z- 256 z+ 256 modInt

sbcBinExtractAXorSum : Int Int Int -- Int Int Int Bool
sbcBinExtractAXorSum = adcBinExtractAXor(sbcBinGetSum)

sbcBinExtractV : Int Int Int -- Int Int Int Bool
sbcBinExtractV = sbcBinExtractAXorSum dip(adcBinExtractAXorSrc) and

sbcBinBody : Int Int Int -- Int Bool Bool Bool
sbcBinBody = sbcBinExtractV dip(sbcBinExtractSC) dip3(sbcCombineBorrow z- 512 z+ 256 modInt)

sbcBody : Bool Int Int Int -- Int Bool Bool Bool
sbcBody = dip(rotl) swap if(sbcDecBody,sbcBinBody)
