import base/nat
import base/int
import base/pos
import divmod

export r8
  type R8
  type Nat
  type Pos
  
  v8 : Int -- R8
  v8zero : R8
  getR8Int : R8 -- Int
  getR8Nat : R8 -- Nat
  getR8Pos : R8 -- Pos

  addR8 : Int R8 -- R8
  incR8 : R8 -- R8
  decR8 : R8 -- R8
  addR8NC : R8 R8 -- R8
  hexDigits : R8 -- Int Int
  fromHexDigitsHL : Int Int -- R8  

  r8DivInt : R8 Int -- R8 Int

  signedToR8 : Int -- Int
  toSignedR8 : Int -- Int  
end

# R8
data R8
  v8 : Int -- R8
end

v8zero : -- R8
v8zero = 0 v8

getR8Int : R8 -- Int
getR8Int = match(v8 -> )

getR8Pos : R8 -- Pos
getR8Pos = match(v8 -> zpos)

getR8Nat : R8 -- Nat
getR8Nat = match(v8 -> znat)

addR8 : Int R8 -- R8
addR8 = getR8Int z+ mod256 v8

incR8 : R8 -- R8
incR8 = getR8Int 1 z+ mod256 v8

decR8 : R8 -- R8
decR8 = getR8Int 255 z+ mod256 v8

addR8NC : R8 R8 -- R8
addR8NC = dip(getR8Int) getR8Int z+ mod256 v8

hexDigits : R8 -- Int Int
hexDigits = getR8Int dup div16 mod16 dip(mod16)

fromHexDigitsHL : Int Int -- R8
fromHexDigitsHL = swap mod16 16 z* swap mod16 z+ v8

r8DivInt : R8 Int -- R8 Int
r8DivInt = dip(dup getR8Int) zpos z/

toSignedR8 : Int -- Int
toSignedR8 = 127 dup2 z> swap drop if(256 z-,)

15 toSignedR8 == 15
128 toSignedR8 == -128
127 toSignedR8 == 127
255 toSignedR8 == -1

signedToR8 : Int -- Int
signedToR8 = 0 dup2 z< swap drop if(256 z+ signedToR8,256 modInt)

11 signedToR8 == 11
-1 signedToR8 == 255
127 signedToR8 == 127
-128 signedToR8 == 128
-127 signedToR8 == 129
